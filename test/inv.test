use std

{* extended euclidean algorithm to find gcd *}
def gcdExtended(a,b) = 
  def recurse() = 
    con g,x,y = gcdExtended(b%a,a)
    -> g, y - (b//a)*x, x
  -> (b,0,1)/(a==0) ; recurse()

{* mod m inverse (if exists) *}
def inv(a,m) = 
  con g,x,y = gcdExtended(a,m)
  -> (x%m + m) % m / (g==1)

{* generalize using a function *}
def inverses(m) = 
    con Z_m = [:m]
    -> Z_m, inv(Z_m, m)

-> print(inverses(10))
-> print(inverses(11))

{* results
0, undef
1, 1
2, 6
3, 4
4, 3
5, 9
6, 2
7, 8
8, 7
9, 5
10, 10  *}
